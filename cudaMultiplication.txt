#include <iostream>
#include <chrono>
#include <cuda_runtime.h>

#define WIDTH 4

global void matrixMul(float *A, float *B, float *C, int width) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    if (row < width && col < width) {
        float sum = 0;
        for (int k = 0; k < width; ++k)
            sum += A[row * width + k] * B[k * width + col];
        C[row * width + col] = sum;
    }
}

void cpuMatrixMul(float *A, float *B, float *C, int width) {
    for (int i = 0; i < width; ++i)
        for (int j = 0; j < width; ++j) {
            float sum = 0;
            for (int k = 0; k < width; ++k)
                sum += A[i * width + k] * B[k * width + j];
            C[i * width + j] = sum;
        }
}

void printMatrix(const char* label, float* mat, int width) {
    std::cout << label << std::endl;
    for (int i = 0; i < width; i++) {
        for (int j = 0; j < width; j++)
            std::cout << mat[i * width + j] << "\\t";
        std::cout << "\\n";
    }
}

int main() {
    int size = WIDTH * WIDTH * sizeof(float);
    float *h_A = new float[WIDTH * WIDTH];
    float *h_B = new float[WIDTH * WIDTH];
    float *h_C = new float[WIDTH * WIDTH];
    float *h_C_gpu = new float[WIDTH * WIDTH];
    float *d_A, *d_B, *d_C;

    for (int i = 0; i < WIDTH * WIDTH; ++i) {
        h_A[i] = i + 1;
        h_B[i] = (i + 1) * 2;
    }

    auto start_cpu = std::chrono::high_resolution_clock::now();
    cpuMatrixMul(h_A, h_B, h_C, WIDTH);
    auto end_cpu = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> cpu_time = end_cpu - start_cpu;

    cudaMalloc(&d_A, size);
    cudaMalloc(&d_B, size);
    cudaMalloc(&d_C, size);
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start);

    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((WIDTH + 15) / 16, (WIDTH + 15) / 16);
    matrixMul<<<blocksPerGrid, threadsPerBlock>>>(d_A, d_B, d_C, WIDTH);

    cudaEventRecord(stop);
    cudaEventSynchronize(stop);

    float gpu_time = 0;
    cudaEventElapsedTime(&gpu_time, start, stop);

    cudaMemcpy(h_C_gpu, d_C, size, cudaMemcpyDeviceToHost);

    std::cout << "\\nMatrix Multiplication\\n-----------------------------\\n";
    printMatrix("Matrix A:", h_A, WIDTH);
    printMatrix("Matrix B:", h_B, WIDTH);
    printMatrix("CPU Result:", h_C, WIDTH);
    printMatrix("GPU Result:", h_C_gpu, WIDTH);

    std::cout << "\\nCPU Time: " << cpu_time.count() * 1000 << " ms";
    std::cout << "\\nGPU Time: " << gpu_time << " ms";
    std::cout << "\\nSpeedup : " << (cpu_time.count() * 1000 / gpu_time) << "x" << std::endl;

    delete[] h_A; delete[] h_B; delete[] h_C; delete[] h_C_gpu;
    cudaFree(d_A); cudaFree(d_B); cudaFree(d_C);

    return 0;
}
"""

with open("matrix_mul.cu", "w") as f:
    f.write(cuda_code)