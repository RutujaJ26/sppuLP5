#include <iostream>
#include <omp.h>
#include <stack>
#include <queue>
#include <chrono>
#include <vector>
using namespace std;
using namespace std::chrono;

void DFS(vector<vector<int>>& adj_matrix, int n, int start) {
    vector<bool> visited(n, false);
    stack<int> s;
    visited[start] = true;
    s.push(start);

    while (!s.empty()) {
        int node = s.top();
        s.pop();
        cout << node << " ";

        for (int i = 0; i < n; ++i) {
            if (adj_matrix[node][i] == 1 && !visited[i]) {
                s.push(i);
                visited[i] = true;
            }
        }
    }
}

void BFS(vector<vector<int>>& adj_matrix, int n, int start) {
    vector<bool> visited(n, false);
    queue<int> q;
    visited[start] = true;
    q.push(start);
    while (!q.empty()) {
        int node = q.front();
        q.pop();
        cout << node << " ";
        for (int i = 0; i < n; ++i) {
            if (adj_matrix[node][i] == 1 && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
}

// Parallel BFS
void parallel_BFS(const vector<vector<int>>& adj_matrix, int n, int start) {
    vector<bool> visited(n, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    #pragma omp parallel
    {
        #pragma omp single
        {
            while (!q.empty()) {
                int node;
                #pragma omp critical
                {
                    if (!q.empty()) {
                        node = q.front();
                        q.pop();
                    } else {
                        node = -1;
                    }
                }

                if (node != -1) {
                    cout << node << " ";

                    #pragma omp parallel for
                    for (int i = 0; i < n; ++i) {
                        if (adj_matrix[node][i] == 1 && !visited[i]) {
                            #pragma omp critical
                            {
                                if (!visited[i]) {
                                    visited[i] = true;
                                    q.push(i);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

// Parallel DFS
void parallel_DFS(const vector<vector<int>>& adj_matrix, int n, int start) {
    vector<bool> visited(n, false);
    stack<int> s;

    visited[start] = true;
    s.push(start);

    #pragma omp parallel
    {
        #pragma omp single
        {
            while (!s.empty()) {
                int node;
                #pragma omp critical
                {
                    if (!s.empty()) {
                        node = s.top();
                        s.pop();
                    } else {
                        node = -1;
                    }
                }

                if (node != -1) {
                    cout << node << " ";

                    #pragma omp parallel for
                    for (int i = 0; i < n; ++i) {
                        if (adj_matrix[node][i] == 1 && !visited[i]) {
                            #pragma omp critical
                            {
                                if (!visited[i]) {
                                    visited[i] = true;
                                    s.push(i);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void add(vector<vector<int>>& adj_matrix, int u, int v) {
    adj_matrix[u][v] = 1;
    adj_matrix[v][u] = 1;
}


int main() {
    int n;
    cout << "Enter number of nodes: ";
    cin >> n;
    vector<vector<int>> adj_matrix(n, vector<int>(n, 0));  // Initialize adjacency matrix to 0

    // Randomly generating the graph
    for (int i = 0; i < n; ++i) {
        int u = rand() % n;
        int v = rand() % n;
        add(adj_matrix, u, v);
    }

    int start_node = 0;  // Starting from node 0

    // Sequential BFS
    cout << "\nSequential BFS: \n";
    double start_time = omp_get_wtime();
    BFS(adj_matrix, n, start_node);
    double end_time = omp_get_wtime();
    double seq_bfs_time = end_time - start_time;
    cout << "\nTime Taken: " << seq_bfs_time << " sec\n\n";

    // Sequential DFS
    cout << "\nSequential DFS: \n";
    start_time = omp_get_wtime();
    DFS(adj_matrix, n, start_node);
    end_time = omp_get_wtime();
    double seq_dfs_time = end_time - start_time;
    cout << "\nTime Taken: " << seq_dfs_time << " sec\n\n";

    // Parallel BFS
    cout << "\nParallel BFS: \n";
    start_time = omp_get_wtime();
    parallel_BFS(adj_matrix, n, start_node);
    end_time = omp_get_wtime();
    double par_bfs_time = end_time - start_time;
    cout << "\nTime Taken: " << par_bfs_time << " sec";
    cout << "\nSpeedup Factor: " << seq_bfs_time / par_bfs_time << "\n\n";

    // Parallel DFS
    cout << "\nParallel DFS: \n";
    start_time = omp_get_wtime();
    parallel_DFS(adj_matrix, n, start_node);
    end_time = omp_get_wtime();
    double par_dfs_time = end_time - start_time;
    cout << "\nTime Taken: " << par_dfs_time << " sec";
    cout << "\nSpeedup Factor: " << seq_dfs_time / par_dfs_time << "\n\n";

    return 0;
}
